#!/usr/bin/perl
# Create skeleton app.

use File::Basename 'dirname';
use File::Spec;
use Data::Section -setup; 
use lib join '/', File::Spec->splitdir(dirname(__FILE__)), 'lib';
use lib join '/', File::Spec->splitdir(dirname(__FILE__)), '..', 'lib';

use strict;
use warnings;
use feature ':5.10';
use Data::Dumper;

my $appName = shift @ARGV;

die "Directory ./ does not empty\n" if <*>;

my $skel = {
  app => {
    $appName => {
      Controller => {
        'Example.pm' => 'Example.pm',
      },
    },
    "$appName.pm" => 'App.pm',
  },
  bin => {
    'app.psgi' => 'app.psgi',
  },
  conf => {
    'application.yaml' => 'application.yaml',
  },
  docs => {},
  lib => {},
  log => {},
  test => {},
  templates => {},
  data => {
    cache => {
      renderer => {},
    },
  },
  'readme.md' => 'readme.md',
};


# Create skel
# Parameters:
#   path - Str - path to current dir
#   level - HashRef

sub createSkel
{
  my ($path, $level) = @_;
  for my $k (keys %$level)
  {
    if (ref $level->{$k})
    {
      my $newPath = "$path/$k";
      mkdir $newPath;
      createSkel($newPath, $level->{$k});
    }
    else
    {
      my $template = section_data('main', $level->{$k});
      my $data = fillTemplate($$template, {appName => $appName});
      my $newPath = "$path/$k";

      open my $fh, '>', $newPath or die "Can't open $newPath\n";
      say $fh $data;
      close $fh;
    }
  }
}

sub fillTemplate
{
  my ($tpl, $data) = @_;
  $tpl =~ s/{{\s*([\w\d\-\._]+)\s*}}/$data->{$1}/ge;
  return $tpl;
}

createSkel('.', $skel);

1;

__DATA__
__[ Example.pm ]__
# Class: {{ appName }}::Controller::Example
#   Example controller.
# Extends:
#   Pony::Web::Controller

package {{ appName }}::Controller::Example;
use Pony::Object qw/Pony::Web::Controller/;

  use Pony::Web::Response;


  # Method: testTextAction
  #   Example action #1
  # Return: Pony::Web::Response
  
  sub testTextAction : Public
    {
      my $this = shift;
      return Pony::Web::Response->new(
        'Hello from {{ appName }}::Controller::Example');
    }
  
1;

__[ App.pm ]__
# Class: {{ appName }}
#   Example application.
# Singleton
# Extends:
#   Pony::Web

package {{ appName }};
use Pony::Object singleton => 'Pony::Web';

  # Method: startup
  #   Runs once on application startup.
  sub startup : Public
    {
      my $this = shift;
      $this->router->add('', q{
        example_text /test/text Example->testText
      });
    }

1;

__[ app.psgi ]__
#!/usr/bin/perl

#
# !!! Do not edit this file. Use ./conf/application.yaml instead !!!
#

use lib "./lib";
use lib "./app";

use File::Basename 'dirname';
use File::Spec;
use Module::Load;
use Twiggy::Server;
use Pony::Stash;
use Pony::Object;

  Pony::Stash->new("./conf/application.yaml");
  my $host = Pony::Stash->get('host');
  my $port = Pony::Stash->get('port');
  my $path = join('/', File::Spec->splitdir(dirname(__FILE__)), '..');
  my $appName = Pony::Stash->get('application');
  
  load $appName;
  
  my $app = $appName->new( host => $host, port => $port, path => $path );
  my $server = Twiggy::Server->new( host => $host, port => $port );
     $server->register_service( sub { $app->clop(@_) } );
  
  AE::cv->recv;

__[ application.yaml ]__
---
mod: DEBUG
host: 127.0.0.1
port: 1337
application: {{ appName }}
path:
    templates: ./templates

__[ readme.md ]__
# Name
{{ appName }} - Pony::Web application.
